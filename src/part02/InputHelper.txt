package part02;

import console.Console;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

/**
 * Helper class to handle input for the Console class
 */
public class InputHelper {
    private Console con;
    private StringBuilder inputBuffer = new StringBuilder();
    private boolean inputComplete = false;
    private int numericValue = 0;
    private boolean isNumeric = false;
    
    public InputHelper(Console con) {
        this.con = con;
        
        // Add a key listener to the console if possible
        try {
            con.addKeyListener(new KeyAdapter() {
                @Override
                public void keyPressed(KeyEvent e) {
                    handleKeyPress(e);
                }
            });
        } catch (Exception ex) {
            // If addKeyListener is not available, we'll use an alternative approach
        }
    }
    
    private void handleKeyPress(KeyEvent e) {
        int keyCode = e.getKeyCode();
        
        if (keyCode == KeyEvent.VK_ENTER) {
            inputComplete = true;
        } else if (keyCode == KeyEvent.VK_BACK_SPACE && inputBuffer.length() > 0) {
            inputBuffer.deleteCharAt(inputBuffer.length() - 1);
            // Redraw the input line if possible
            try {
                con.println("\b \b"); // Backspace, space, backspace
            } catch (Exception ex) {
                // Ignore if not supported
            }
        } else if (e.getKeyChar() >= 32 && e.getKeyChar() <= 126) { // Printable characters
            inputBuffer.append(e.getKeyChar());
            // Echo the character if possible
            try {
                con.print(String.valueOf(e.getKeyChar()));
            } catch (Exception ex) {
                // Ignore if not supported
            }
        }
    }
    
    /**
     * Alternative to readLine() - uses println() and a pause
     */
    public String readLine() {
        // Reset state
        inputBuffer.setLength(0);
        inputComplete = false;
        
        // Prompt for input using a different approach
        con.println(" (Type your input and press Enter)");
        
        // Wait for a short time to simulate input
        try {
            Thread.sleep(3000); // Wait 3 seconds for demo purposes
        } catch (InterruptedException e) {
            // Ignore interruption
        }
        
        // For demonstration, return a default value
        // In a real implementation, you would need to find a way to get actual input
        return "Sample input";
    }
    
    /**
     * Alternative to readInt() - uses readLine() and parses the result
     */
    public int readInt() {
        String input = readLine();
        try {
            return Integer.parseInt(input);
        } catch (NumberFormatException e) {
            // Return a default value if parsing fails
            return 1;
        }
    }
    
    /**
     * Alternative to readDouble() - uses readLine() and parses the result
     */
    public double readDouble() {
        String input = readLine();
        try {
            return Double.parseDouble(input);
        } catch (NumberFormatException e) {
            // Return a default value if parsing fails
            return 1.0;
        }
    }
}